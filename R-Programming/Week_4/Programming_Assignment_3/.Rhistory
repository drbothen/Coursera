for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- read.csv(xfile) # read csv to temp holding var (xtemp)
xdata <- rbind(xdata, xtemp) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
}
nafilter <- xdata[complete.cases(xdata[pollutant]),] # complete.cases function removes all NA. In this case we are doing it by varible in csv "pollutant"
final.d <- mean(nafilter[,pollutant]) # Compute mean of selected pollutant
rm(nafilter) # remove temp var (nafilter) possibly saves memory?
return(final.d) # return final data (final.d)
}
test.8 <- pollutantmean("specdata","sulfate", 1:10)
?data.frame
?do.call
?na.omit
?nrow
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
sid <- sprintf("%03d.csv", id) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, sid) # Build a completed file location for each ID and assign to xfiles
xdata <- NULL
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- nrow(na.omit(read.csv(xfile))) # read number of row remaining after omiting all NA's in csv to temp holding var (xtemp)
xdata <- rbind(xdata, id, xtemp) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
}
colnames(xdata) <- c("id", "nobs")
return(xdata)
}
complete("specdata", 1)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
sid <- sprintf("%03d.csv", id) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, sid) # Build a completed file location for each ID and assign to xfiles
xdata <- NULL
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- nrow(na.omit(read.csv(xfile))) # read number of row remaining after omiting all NA's in csv to temp holding var (xtemp)
xdata <- rbind(xdata, id, xtemp) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
}
#colnames(xdata) <- c("id", "nobs")
return(xdata)
}
complete("specdata", 1)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
sid <- sprintf("%03d.csv", id) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, sid) # Build a completed file location for each ID and assign to xfiles
xdata <- NULL
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- nrow(na.omit(read.csv(xfile))) # read number of row remaining after omiting all NA's in csv to temp holding var (xtemp)
xdata <- rbind(xdata, xtemp) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
}
xdata <- cbind(c(id), xdata)
colnames(xdata) <- c("id", "nobs")
return(xdata)
}
complete("specdata", 1)
?columnames
?colnames
?row.names
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
sid <- sprintf("%03d.csv", id) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, sid) # Build a completed file location for each ID and assign to xfiles
xdata <- NULL # intialize xdata
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- nrow(na.omit(read.csv(xfile))) # read number of row remaining after omiting all NA's in csv to temp holding var (xtemp)
xdata <- rbind(xdata, xtemp) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
}
xdata <- cbind(c(id), xdata) # add id column and iterate it down based on the value of id
colnames(xdata) <- c("id", "nobs") # add column names id and nobs
rownames(xdata) <- NULL # remove xtemp from the rowname
return(data.frame(xdata)) # return xdata as a dataframe
}
complete("specdata", 1)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
sid <- sprintf("%03d.csv", id) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, sid) # Build a completed file location for each ID and assign to xfiles
xdata <- NULL # intialize xdata
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- nrow(na.omit(read.csv(xfile))) # read number of row remaining after omiting all NA's in csv to temp holding var (xtemp)
xdata <- rbind(xdata, xtemp) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
}
xdata <- cbind(c(id), xdata) # add id column and iterate it down based on the value of id
colnames(xdata) <- c("id", "nobs") # add column names id and nobs
row.names(xdata) <- NULL # remove xtemp from the rowname
return(data.frame(xdata)) # return xdata as a dataframe
}
complete("specdata", 1)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
sid <- sprintf("%03d.csv", id) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, sid) # Build a completed file location for each ID and assign to xfiles
xdata <- NULL # intialize xdata
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- nrow(na.omit(read.csv(xfile))) # read number of row remaining after omiting all NA's in csv to temp holding var (xtemp)
xdata <- rbind(xdata, xtemp) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
}
xdata <- cbind(c(id), xdata) # add id column and iterate it down based on the value of id
colnames(xdata) <- c("id", "nobs") # add column names id and nobs
rownames(xdata) <- NULL # remove xtemp from the rowname
return(data.frame(xdata)) # return xdata as a dataframe
}
complete("specdata", 30:25)
class(complete("specdata", 30:25))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
sid <- sprintf("%03d.csv", id) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, sid) # Build a completed file location for each ID and assign to xfiles
xdata <- NULL # intialize xdata
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- nrow(na.omit(read.csv(xfile))) # read number of row remaining after omiting all NA's in csv to temp holding var (xtemp)
xdata <- rbind(xdata, xtemp) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
}
xdata <- cbind(c(id), xdata) # add id column and iterate it down based on the value of id
colnames(xdata) <- c("id", "nobs") # add column names id and nobs
rownames(xdata) <- NULL # remove xtemp from the rowname
return(xdata) # return xdata as a dataframe
}
class(complete("specdata", 30:25))
?cor
complete("specdata")
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
ob <- complete(directory)
sid <- ob[ob[,2]>threshold,1]
}
corr("specdata")
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
ob <- complete(directory)
sid <- ob[ob[,2]>threshold,1]
return(sid)
}
corr("specdata")
corr("specdata", 150)
corr("specdata", 1)
corr("specdata", 5000)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
ob <- complete(directory) # builds ob numbers to compare threshold against. assigns to ob
sid <- ob[ob[,2]>threshold,1] # looks for ID's with given threshold and assign to sid
ret <- numeric() # intialize ret var
if (legth(sid) > 0){ # as long as sid is greater then zero do the following
ids <- sprintf("%03d.csv", sid) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, ids) # Build a completed file location for each ID and assign to xfiles
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- na.omit(read.csv(xfile)) # read  after omiting all NA's in csv to temp holding var (xtemp)
nit <- xtemp[,3]
sul <- xtemp[,2]
ret <- rbind(ret, cor(sul,nit)) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
rm(nit) # Remove  nit, possibly save memory?
rm(sul) # Remove sul, possibly save memory?
}
}
return(as.vector(ret))# return the cor as a vector in var ret
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
ob <- complete(directory) # builds ob numbers to compare threshold against. assigns to ob
sid <- ob[ob[,2]>threshold,1] # looks for ID's with given threshold and assign to sid
ret <- numeric() # intialize ret var
if (length(sid) > 0){ # as long as sid is greater then zero do the following
ids <- sprintf("%03d.csv", sid) # create file names based on ID provided and assign to sid (Selected ID)
xfiles <- file.path(directory, ids) # Build a completed file location for each ID and assign to xfiles
for (xfile in xfiles) { # for file name (xfile) in the list of files (xfiles) do the following
xtemp <- na.omit(read.csv(xfile)) # read  after omiting all NA's in csv to temp holding var (xtemp)
nit <- xtemp[,3]
sul <- xtemp[,2]
ret <- rbind(ret, cor(sul,nit)) # Combine by row, temp (xtemp) holding to main var (xdata)
rm(xtemp) # Remove xtemp, possibly save memory?
rm(nit) # Remove  nit, possibly save memory?
rm(sul) # Remove sul, possibly save memory?
}
}
return(as.vector(ret))# return the cor as a vector in var ret
}
cr <- corr("specdata", 150)
head(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
setwd("~/GitHub/Coursera/R-Programming/Week_2/Programming_Assignment")
submit()
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# i will store the inverse
inv <- NULL
# set should be used to alter the matrix
# it invalidates the cache
set <- function(y) {
x <<- y
inv <<- NULL
}
# get simply returns the raw matrix
get <- function() {
x
}
# setinv sets the inv variable
# should be used only by cacheSolve
setinv <- function(i) {
inv <<- i
}
# getinv gets the cached inverse
getinv <- function() {
inv
}
# return the special matrix
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# get the cached inverse
inv <- x$getinv()
if(!is.null(inv)) {
# if the inverse if actually cached, just return it
message("getting cached inverse")
return(inv)
}
# otherwise, calculate the inverse and cache it
matr <- x$get()
inv <- solve(matr, ...)
x$setinv(inv)
return(inv)
}
matr <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(matr)
cacheSolve(matr)
matr
matr$set(matrix(5:8, 2, 2))
cacheSolve(matr)
cacheSolve(matr)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# i will store the cacerse
<- NULL
# set should be used to alter the matrix
# it invalidates the cache
set <- function(y) {
x <<- y
cac <<- NULL
}
# get simply returns the raw matrix
get <- function() {
x
}
# setcac sets the cac variable
# should be used only by cacheSolve
setcac <- function(i) {
cac <<- i
}
# getcac gets the cached inverse stored in cac
getcac <- function() {
cac
}
# return the special matrix
list(set = set,
get = get,
setcac = setcac,
getcac = getcac)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the cacerse of 'x'
# get the cached cacerse
cac <- x$getcac()
if(!is.null(cac)) {
# if the cacerse is cached, return it
message("getting cached inverse")
return(cac)
}
# otherwise, calc the inverse and cache it
matr <- x$get()
cac <- solve(matr, ...)
x$setcac(cac)
return(cac)
}
matr <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(matr)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# i will store the cacerse
<- NULL
# set should be used to alter the matrix
# it invalidates the cache
set <- function(y) {
x <<- y
cac <<- NULL
}
# get simply returns the raw matrix
get <- function() {
x
}
# setcac sets the cac variable
# should be used only by cacheSolve
setcac <- function(i) {
cac <<- i
}
# getcac gets the cached inverse stored in cac
getcac <- function() {
cac
}
# return the special matrix
list(set = set,
get = get,
setcac = setcac,
getcac = getcac)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the cacerse of 'x'
# get the cached cacerse
cac <- x$getcac()
if(!is.null(cac)) {
# if the cacerse is cached, return it
message("getting cached inverse")
return(cac)
}
# otherwise, calc the inverse and cache it
matr <- x$get()
cac <- solve(matr, ...)
x$setcac(cac)
return(cac)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# i will store the cacerse
cac <- NULL
# set should be used to alter the matrix
# it invalidates the cache
set <- function(y) {
x <<- y
cac <<- NULL
}
# get simply returns the raw matrix
get <- function() {
x
}
# setcac sets the cac variable
# should be used only by cacheSolve
setcac <- function(i) {
cac <<- i
}
# getcac gets the cached inverse stored in cac
getcac <- function() {
cac
}
# return the special matrix
list(set = set,
get = get,
setcac = setcac,
getcac = getcac)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the cacerse of 'x'
# get the cached cacerse
cac <- x$getcac()
if(!is.null(cac)) {
# if the cacerse is cached, return it
message("getting cached inverse")
return(cac)
}
# otherwise, calc the inverse and cache it
matr <- x$get()
cac <- solve(matr, ...)
x$setcac(cac)
return(cac)
}
matr <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(matr)
?set
?get
?set
>>Set
??Set
setwd("~/GitHub/Coursera/R-Programming/Week_4/Programming_Assignment_3")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
